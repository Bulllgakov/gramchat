import { Router } from 'express';
import { z } from 'zod';
import jwt from 'jsonwebtoken';
import { UserRole } from '@prisma/client';
import { prisma } from '../utils/prisma';
import { config } from '../config';
import { AppError } from '../middleware/errorHandler';
import { authenticate } from '../middleware/auth';
import { verifyPassword } from '../utils/password.utils';
import { verifyTelegramAuth } from '../utils/telegram-auth.utils';
import { SubscriptionService } from '../services/subscription.service';

const router = Router();

const loginSchema = z.object({
  telegramId: z.string(),
  firstName: z.string(),
  lastName: z.string().optional(),
  username: z.string().optional()
});

const emailLoginSchema = z.object({
  email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z.string().min(1, '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
});

const telegramWidgetSchema = z.object({
  id: z.number(),
  first_name: z.string(),
  last_name: z.string().optional(),
  username: z.string().optional(),
  photo_url: z.string().optional(),
  auth_date: z.number(),
  hash: z.string(),
  inviteCode: z.string().optional()
});

// Telegram Login Widget –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
router.post('/telegram-widget-login', async (req, res, next) => {
  try {
    const validation = telegramWidgetSchema.safeParse(req.body);
    if (!validation.success) {
      throw new AppError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    const authData = validation.data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç Telegram
    const botToken = process.env.TELEGRAM_AUTH_BOT_TOKEN;
    if (!botToken) {
      throw new AppError(500, 'Telegram bot token not configured');
    }
    
    if (!verifyTelegramAuth(authData, botToken)) {
      throw new AppError(401, '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    const telegramId = BigInt(authData.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { telegramId },
      include: {
        ownedBots: true,
        managedBots: {
          include: {
            bot: true
          }
        }
      }
    });

    if (!user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
      const isPermanentAdmin = authData.id.toString() === '236692046';
      const isFirstAdmin = (await prisma.user.count()) === 0 && 
                          authData.id.toString() === process.env.FIRST_ADMIN_TELEGRAM_ID;
      
      let role: UserRole | undefined = 'OWNER'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –≤–ª–∞–¥–µ–ª—å—Ü—ã
      let hasFullAccess = false;
      let inviteCodeId: string | undefined;
      
      if (isPermanentAdmin || isFirstAdmin) {
        role = 'ADMIN';
        hasFullAccess = true;
      } else if (authData.inviteCode) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
        const invite = await prisma.inviteCode.findUnique({
          where: { 
            code: authData.inviteCode
          }
        });
        
        if (!invite) {
          throw new AppError(400, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥');
        }
        
        if (!invite.isActive) {
          throw new AppError(400, '–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }
        
        if (invite.expiresAt && invite.expiresAt < new Date()) {
          throw new AppError(400, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –∏—Å—Ç–µ–∫');
        }
        
        if (invite.usedCount >= invite.maxUses) {
          throw new AppError(400, '–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑');
        }
        
        role = invite.role as UserRole;
        hasFullAccess = true; // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–º –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        inviteCodeId = invite.id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        await prisma.inviteCode.update({
          where: { id: invite.id },
          data: { usedCount: invite.usedCount + 1 }
        });
      }
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞, –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (hasFullAccess = false)
      
      user = await prisma.user.create({
        data: {
          telegramId,
          firstName: authData.first_name,
          lastName: authData.last_name,
          username: authData.username,
          role,
          hasFullAccess,
          inviteCodeId
        },
        include: {
          ownedBots: true,
          managedBots: {
            include: {
              bot: true
            }
          }
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (role === 'OWNER') {
        // –í–ª–∞–¥–µ–ª—å—Ü—ã –ø–æ–ª—É—á–∞—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        // –ú–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª PRO –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        await SubscriptionService.createSubscription(user.id, 'FREE', false);
      }
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await prisma.user.update({
        where: { id: user.id },
        data: {
          firstName: authData.first_name,
          lastName: authData.last_name || user.lastName,
          username: authData.username || user.username
        },
        include: {
          ownedBots: true,
          managedBots: {
            include: {
              bot: true
            }
          }
        }
      });
    }

    if (!user.isActive) {
      throw new AppError(403, '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    // –í—Å–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram Widget

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, role: user.role },
      config.JWT_SECRET,
      { expiresIn: '7d' }
    );

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    await prisma.session.create({
      data: {
        token,
        userId: user.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
      }
    });

    res.json({
      token,
      user: {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        role: user.role,
        hasFullAccess: user.hasFullAccess,
        bots: user.ownedBots || user.managedBots?.map(mb => mb.bot),
        hasApprovedBots: user.ownedBots?.some(bot => bot.isApproved) ?? false,
        needsBotCreation: user.role === 'OWNER' && user.ownedBots?.length === 0
      }
    });
  } catch (error) {
    next(error);
  }
});

// Email/Password –ª–æ–≥–∏–Ω —É–¥–∞–ª–µ–Ω - –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã —Å Telegram Widget

router.post('/telegram-login', async (req, res, next) => {
  try {
    const data = loginSchema.parse(req.body);

    // –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    // –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(data.telegramId) }
    });

    if (!user) {
      throw new AppError(403, 'Registration requires an invite code. Please use the new auth flow.');
    }

    if (!user.isActive) {
      throw new AppError(403, 'Account is disabled');
    }

    const token = jwt.sign(
      { userId: user.id, role: user.role },
      config.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        role: user.role
      }
    });
  } catch (error) {
    next(error);
  }
});

router.post('/validate-token', async (req, res, next) => {
  try {
    const { token, inviteCode } = req.body;
    console.log('üîê Validate token request:', { token, inviteCode });
    
    if (!token) {
      throw new AppError(400, 'Token is required');
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º authBot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
    const { authBot } = await import('../services/authBot.service');
    const telegramUserId = await authBot.validateToken(token);
    console.log('üîç Token validation result:', telegramUserId);
    
    if (!telegramUserId) {
      throw new AppError(401, 'Invalid or expired token');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram API
    const botToken = process.env.TELEGRAM_AUTH_BOT_TOKEN;
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getChat?chat_id=${telegramUserId}`);
    const chatData: any = await response.json();
    
    if (!chatData.ok) {
      throw new AppError(400, 'Failed to get user data');
    }

    const userData = chatData.result;
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramUserId) }
    });
    console.log('üë§ Existing user:', user);

    if (!user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
      const isPermanentAdmin = telegramUserId.toString() === '236692046';
      const isFirstAdmin = (await prisma.user.count() === 0) && telegramUserId.toString() === process.env.FIRST_ADMIN_TELEGRAM_ID;
      console.log('üÜï New user registration:', { isPermanentAdmin, isFirstAdmin, telegramUserId });
      
      let role: UserRole | null = null;
      // Managers are assigned to bots after registration
      let inviteCodeId: string | undefined;
      let hasApprovedShop = false; // –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
      
      if (isPermanentAdmin || isFirstAdmin) {
        role = 'ADMIN';
      } else if (inviteCode) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
        const invite = await prisma.inviteCode.findUnique({
          where: { code: inviteCode }
        });
        
        if (!invite) {
          throw new AppError(400, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥');
        }
        
        if (!invite.isActive) {
          throw new AppError(400, '–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }
        
        if (invite.expiresAt && invite.expiresAt < new Date()) {
          throw new AppError(400, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –∏—Å—Ç–µ–∫');
        }
        
        if (invite.usedCount >= invite.maxUses) {
          throw new AppError(400, '–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑');
        }
        
        role = invite.role as UserRole;
        inviteCodeId = invite.id;
        
        // Managers are assigned to bots after registration, not during
        // No need for botId assignment here
        
        hasApprovedShop = true; // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–º –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        await prisma.inviteCode.update({
          where: { id: invite.id },
          data: { usedCount: invite.usedCount + 1 }
        });
      } else {
        // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
        role = 'OWNER';
        hasApprovedShop = false; // –í–ª–∞–¥–µ–ª—å—Ü—ã –±–µ–∑ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
      }
      
      user = await prisma.user.create({
        data: {
          telegramId: BigInt(telegramUserId),
          firstName: userData.first_name || 'User',
          lastName: userData.last_name,
          username: userData.username,
          role: role!,
          inviteCodeId
          // Bot assignments handled through BotManager after registration
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (role === 'OWNER') {
        await SubscriptionService.createSubscription(user.id, 'FREE', false);
      }
    } else {
      user = await prisma.user.update({
        where: { id: user.id },
        data: {
          firstName: userData.first_name || user.firstName,
          lastName: userData.last_name || user.lastName,
          username: userData.username || user.username
        }
      });
    }

    if (!user.isActive) {
      throw new AppError(403, 'Account is disabled');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userWithBots = await prisma.user.findUnique({
      where: { id: user.id },
      include: {
        ownedBots: true,
        managedBots: {
          include: {
            bot: true
          }
        }
      }
    });

    const jwtToken = jwt.sign(
      { userId: user.id, role: user.role },
      config.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token: jwtToken,
      user: {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        username: user.username,
        role: user.role,
        bots: userWithBots?.ownedBots || userWithBots?.managedBots?.map(mb => mb.bot),
        hasApprovedBots: userWithBots?.ownedBots?.some(bot => bot.isApproved) ?? false,
        needsBotCreation: user.role === 'OWNER' && userWithBots?.ownedBots?.length === 0
      }
    });
  } catch (error) {
    next(error);
  }
});

// –°–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
router.post('/change-password', authenticate, async (req, res, next) => {
  try {
    const changePasswordSchema = z.object({
      currentPassword: z.string().min(1, '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
      newPassword: z.string().min(8, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤')
    });

    const validation = changePasswordSchema.safeParse(req.body);
    if (!validation.success) {
      throw new AppError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    const { currentPassword, newPassword } = validation.data;
    const userId = req.user!.id;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user || !user.passwordHash) {
      throw new AppError(400, '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await verifyPassword(currentPassword, user.passwordHash);
    if (!isPasswordValid) {
      throw new AppError(401, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const { hashPassword } = await import('../utils/password.utils');
    const newPasswordHash = await hashPassword(newPassword);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await prisma.user.update({
      where: { id: userId },
      data: {
        passwordHash: newPasswordHash,
        requirePasswordChange: false
      }
    });

    res.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    });
  } catch (error) {
    next(error);
  }
});

router.get('/me', authenticate, async (req, res, next) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user!.id },
      include: {
        ownedBots: true,
        managedBots: {
          include: {
            bot: true
          }
        }
      }
    });

    if (!user) {
      throw new AppError(404, 'User not found');
    }

    // Get first bot for backward compatibility
    const firstOwnedBot = user.ownedBots?.[0];
    const firstManagedBot = user.managedBots?.[0]?.bot;
    const primaryBot = firstOwnedBot || firstManagedBot;

    res.json({
      id: user.id,
      telegramId: user.telegramId?.toString() || '',
      firstName: user.firstName,
      lastName: user.lastName,
      username: user.username,
      role: user.role,
      hasFullAccess: user.hasFullAccess,
      shop: primaryBot, // For backward compatibility
      hasApprovedShop: firstOwnedBot?.isApproved ?? false,
      needsShopCreation: user.role === 'OWNER' && user.ownedBots.length === 0,
      // New fields for bot support
      ownedBots: user.ownedBots,
      managedBots: user.managedBots.map(mb => mb.bot)
    });
  } catch (error) {
    next(error);
  }
});

export default router;