import nodemailer from 'nodemailer';
import { config } from '../config';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è email –æ–ø—Ü–∏–π
interface EmailOptions {
  to: string;
  subject: string;
  html: string;
  text?: string;
}

class EmailService {
  private transporter: nodemailer.Transporter | null = null;

  constructor() {
    this.initializeTransporter();
  }

  private initializeTransporter() {
    // –ï—Å–ª–∏ email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    if (!config.EMAIL_HOST || !config.EMAIL_USER) {
      console.log('‚ö†Ô∏è Email service not configured. Emails will be logged to console.');
      return;
    }

    try {
      this.transporter = nodemailer.createTransport({
        host: config.EMAIL_HOST,
        port: config.EMAIL_PORT || 587,
        secure: config.EMAIL_SECURE || false,
        auth: {
          user: config.EMAIL_USER,
          pass: config.EMAIL_PASSWORD,
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      this.transporter.verify((error) => {
        if (error) {
          console.error('‚ùå Email service connection failed:', error);
          this.transporter = null;
        } else {
          console.log('‚úÖ Email service ready');
        }
      });
    } catch (error) {
      console.error('‚ùå Failed to initialize email service:', error);
      this.transporter = null;
    }
  }

  async sendEmail(options: EmailOptions): Promise<boolean> {
    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    if (!this.transporter) {
      console.log('üìß Email (console mode):');
      console.log('To:', options.to);
      console.log('Subject:', options.subject);
      console.log('Content:', options.text || options.html);
      console.log('---');
      return true;
    }

    try {
      const info = await this.transporter.sendMail({
        from: `"${config.EMAIL_FROM_NAME || 'GramChat'}" <${config.EMAIL_FROM || config.EMAIL_USER}>`,
        to: options.to,
        subject: options.subject,
        text: options.text,
        html: options.html,
      });

      console.log('‚úÖ Email sent:', info.messageId);
      return true;
    } catch (error) {
      console.error('‚ùå Failed to send email:', error);
      // Fallback to console
      console.log('üìß Email (fallback to console):');
      console.log('To:', options.to);
      console.log('Subject:', options.subject);
      console.log('Content:', options.text || options.html);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
  async sendManagerCredentials(email: string, password: string, shopName: string, ownerName: string) {
    const loginUrl = `${config.FRONTEND_URL || 'http://localhost:5173'}/login`;
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #333;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GramChat!</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
        <p>${ownerName} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω "${shopName}".</p>
        
        <div style="background: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0;">
          <h3 style="margin-top: 0;">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</h3>
          <p><strong>Email (–ª–æ–≥–∏–Ω):</strong> ${email}</p>
          <p><strong>–ü–∞—Ä–æ–ª—å:</strong> ${password}</p>
          <p style="margin-top: 15px;">
            <a href="${loginUrl}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </a>
          </p>
        </div>
        
        <p style="color: #666; font-size: 14px;">
          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É.
        </p>
        
        <hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
        <p style="color: #999; font-size: 12px;">
          –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
        </p>
      </div>
    `;

    const text = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GramChat!

${ownerName} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω "${shopName}".

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
Email (–ª–æ–≥–∏–Ω): ${email}
–ü–∞—Ä–æ–ª—å: ${password}

–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É: ${loginUrl}

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É.
    `;

    return this.sendEmail({
      to: email,
      subject: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ GramChat - ${shopName}`,
      html,
      text,
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
  async sendPasswordReset(email: string, newPassword: string, shopName: string) {
    const loginUrl = `${config.FRONTEND_URL || 'http://localhost:5173'}/login`;
    
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #333;">–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ GramChat</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
        <p>–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω "${shopName}" –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.</p>
        
        <div style="background: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0;">
          <h3 style="margin-top: 0;">–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</h3>
          <p><strong>Email (–ª–æ–≥–∏–Ω):</strong> ${email}</p>
          <p><strong>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</strong> ${newPassword}</p>
          <p style="margin-top: 15px;">
            <a href="${loginUrl}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">
              –í–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
            </a>
          </p>
        </div>
        
        <p style="color: #666; font-size: 14px;">
          –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞.
        </p>
        
        <hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
        <p style="color: #999; font-size: 12px;">
          –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
        </p>
      </div>
    `;

    const text = `
–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ GramChat

–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω "${shopName}" –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.

–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
Email (–ª–æ–≥–∏–Ω): ${email}
–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}

–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É: ${loginUrl}

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞.
    `;

    return this.sendEmail({
      to: email,
      subject: `–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è GramChat - ${shopName}`,
      html,
      text,
    });
  }
}

export const emailService = new EmailService();