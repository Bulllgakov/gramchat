import TelegramBot from 'node-telegram-bot-api';
import Redis from 'ioredis';

class AuthBotService {
  private bot: TelegramBot | null = null;
  private authTokens: Map<string, number> = new Map();
  private redis: Redis | null = null;
  private isInitializing: boolean = false;
  private isInitialized: boolean = false;
  private processedMessages: Set<number> = new Set();

  async init() {
    const token = process.env.TELEGRAM_AUTH_BOT_TOKEN;
    
    if (!token) {
      console.warn('‚ö†Ô∏è  Telegram auth bot token not configured');
      return;
    }

    // Prevent multiple simultaneous initializations
    if (this.isInitializing) {
      console.log('‚è≥ Bot is already initializing, skipping...');
      return;
    }

    if (this.isInitialized && this.bot) {
      console.log('‚úÖ Bot is already initialized and running');
      return;
    }

    this.isInitializing = true;

    // Stop existing bot if any
    if (this.bot) {
      console.log('üîÑ Stopping existing bot instance...');
      await this.stop();
      // Add delay to ensure complete cleanup
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    try {
      // Initialize Redis
      this.redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');
      console.log('üî¥ Redis connected for auth tokens');
      
      // Create bot instance with proper polling settings
      this.bot = new TelegramBot(token, { 
        polling: true
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.bot.getMe();
      console.log('ü§ñ Bot info:', {
        id: botInfo.id,
        username: botInfo.username,
        first_name: botInfo.first_name
      });
      
      // Setup handlers
      this.setupHandlers();
      
      // Manually check for updates to debug
      setTimeout(async () => {
        try {
          const updates = await this.bot!.getUpdates();
          console.log('üì¨ Manual update check, found:', updates.length, 'updates');
          if (updates.length > 0) {
            console.log('üì¨ First update:', JSON.stringify(updates[0], null, 2));
          }
        } catch (error) {
          console.error('‚ùå Error getting updates:', error);
        }
      }, 3000);
      
      this.isInitialized = true;
      this.isInitializing = false;
      console.log('‚úÖ Telegram auth bot initialized successfully!');
    } catch (error) {
      console.error('‚ùå Failed to initialize auth bot:', error);
      this.isInitializing = false;
      this.isInitialized = false;
      // Clean up on error
      if (this.bot) {
        try {
          await this.bot.stopPolling();
        } catch (e) {}
        this.bot = null;
      }
    }
  }

  private setupHandlers() {
    if (!this.bot) return;

    console.log('üéØ Setting up bot handlers...');
    
    // Add debug logging for all updates
    this.bot.on('message', (msg) => {
      console.log('üì© Received any message:', {
        type: msg.chat.type,
        id: msg.message_id,
        from: msg.from?.username,
        text: msg.text
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('‚ùå Polling error:', {
        message: error.message,
        code: (error as any).code,
        stack: error.stack
      });
    });

    this.bot.on('error', (error) => {
      console.error('‚ùå Bot error:', {
        message: error.message,
        code: (error as any).code,  
        stack: error.stack
      });
    });
    
    this.bot.on('webhook_error', (error) => {
      console.error('‚ùå Webhook error:', error);
    });
    
    // Log when polling starts
    console.log('üì° Bot polling status:', this.bot.isPolling());

    // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (msg) => {
      const messageId = msg.message_id;
      const text = msg.text;
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      
      // Check for duplicate messages
      if (this.processedMessages.has(messageId)) {
        console.log('‚ö†Ô∏è Duplicate message, skipping:', messageId);
        return;
      }
      
      this.processedMessages.add(messageId);
      
      // Clean up old message IDs (keep only last 100)
      if (this.processedMessages.size > 100) {
        const arr = Array.from(this.processedMessages);
        this.processedMessages = new Set(arr.slice(-100));
      }
      
      console.log('üì® Received message:', {
        message_id: messageId,
        chat_id: chatId,
        text: text,
        from: msg.from?.username || msg.from?.first_name,
        user_id: userId
      });

      if (!text || !userId) return;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
      if (text === '/start') {
        console.log('üöÄ Processing /start command');
        try {
          await this.bot!.sendMessage(
            chatId,
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GramChat!\n\nüîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞\nüéüÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –ö–û–î'
          );
          console.log('‚úÖ /start response sent successfully');
        } catch (error) {
          console.error('‚ùå Error sending /start response:', error);
        }
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ /login —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–º
      if (text.startsWith('/login')) {
        console.log('üîê Processing /login command');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        const parts = text.split(' ');
        const inviteCode = parts[1];
        
        const token = Math.random().toString(36).substring(2, 15);
        
        // Store in both memory and Redis
        this.authTokens.set(token, userId);
        if (this.redis) {
          await this.redis.setex(`auth:token:${token}`, 300, userId.toString()); // 5 minutes TTL
        }
        console.log(`üé´ Generated token: ${token} for user: ${userId}`);
        
        // Cleanup after 5 minutes
        setTimeout(() => {
          this.authTokens.delete(token);
        }, 5 * 60 * 1000);
        
        const frontendUrl = process.env.CORS_ORIGIN || 'http://localhost:5173';
        let authLink = `${frontendUrl}/auth?token=${token}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –≤ URL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (inviteCode) {
          authLink += `&invite=${inviteCode}`;
          console.log(`üéüÔ∏è –í–∫–ª—é—á–µ–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥: ${inviteCode}`);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `üîê <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b>\n\n<code>${authLink}</code>\n\n‚è± –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç\nüìã –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å`;
        
        if (inviteCode) {
          message += `\n\n‚úÖ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥ <b>${inviteCode}</b> –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;
        }
        
        try {
          const result = await this.bot!.sendMessage(chatId, message, {
            parse_mode: 'HTML'
          });
          console.log('‚úÖ /login response sent successfully, message_id:', result.message_id);
        } catch (error) {
          console.error('‚ùå Error sending /login response:', error);
        }
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const upperText = text.trim().toUpperCase();
      if (upperText.length === 8 && /^[A-Z0-9]+$/.test(upperText)) {
        console.log('üéüÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', upperText);
        
        try {
          await this.bot!.sendMessage(
            chatId,
            `üéüÔ∏è –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n<code>/login ${upperText}</code>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å`,
            { parse_mode: 'HTML' }
          );
          console.log('‚úÖ Invite code hint sent');
        } catch (error) {
          console.error('‚ùå Error sending invite code hint:', error);
        }
      }
    });
  }

  public async validateToken(token: string): Promise<number | null> {
    console.log('üîç Validating token:', token);
    console.log('üì¶ Current tokens map:', Array.from(this.authTokens.entries()));
    
    // Check memory first
    const userId = this.authTokens.get(token);
    if (userId) {
      console.log('‚úÖ Token valid for user (from memory):', userId);
      this.authTokens.delete(token);
      if (this.redis) {
        await this.redis.del(`auth:token:${token}`);
      }
      return userId;
    }
    
    // Check Redis
    if (this.redis) {
      const redisUserId = await this.redis.get(`auth:token:${token}`);
      if (redisUserId) {
        console.log('‚úÖ Token valid for user (from Redis):', redisUserId);
        await this.redis.del(`auth:token:${token}`);
        return parseInt(redisUserId);
      }
    }
    
    console.log('‚ùå Token not found or expired');
    return null;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
  public async stop() {
    try {
      this.isInitialized = false;
      this.isInitializing = false;
      
      if (this.bot) {
        console.log('üõë Stopping bot polling...');
        await this.bot.stopPolling();
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.bot.removeAllListeners();
        this.bot = null;
        console.log('‚úÖ Bot stopped successfully');
      }
      if (this.redis) {
        console.log('üî¥ Disconnecting Redis...');
        this.redis.disconnect();
        this.redis = null;
      }
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏
      this.authTokens.clear();
      // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      this.processedMessages.clear();
    } catch (error) {
      console.error('‚ùå Error stopping bot:', error);
    }
  }
}

export const authBot = new AuthBotService();