generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Основная модель Bot (заменяет Shop)
model Bot {
  id          String       @id @default(uuid())
  name        String       // Название бота для интерфейса
  botToken    String       @unique
  botUsername String       @unique
  category    String       // Категория бизнеса
  ownerId     String       
  isActive    Boolean      @default(true)
  isApproved  Boolean      @default(false) // Одобрен администратором
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  owner       User         @relation("BotOwner", fields: [ownerId], references: [id])
  managers    BotManager[] // Менеджеры через промежуточную таблицу
  dialogs     Dialog[]
  inviteCodes InviteCode[] // Инвайт-коды привязаны к владельцу, не к боту
  botSubscription BotSubscription? // Подписка на бота
}

model User {
  id                 String         @id @default(uuid())
  telegramId         BigInt?        @unique
  email              String?        @unique // Оставляем для обратной совместимости
  passwordHash       String?        // Оставляем для обратной совместимости
  firstName          String
  lastName           String?
  username           String?        // Telegram username
  role               UserRole       @default(MANAGER)
  isActive           Boolean        @default(true)
  hasFullAccess      Boolean        @default(false) // Для владельцев
  inviteCodeId       String?        // Использованный инвайт-код
  requirePasswordChange Boolean     @default(false) // Оставляем для обратной совместимости
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  // Связи
  ownedBots          Bot[]          @relation("BotOwner")
  managedBots        BotManager[]   // Боты через промежуточную таблицу
  assignedDialogs    Dialog[]       // Назначенные диалоги
  createdInviteCodes InviteCode[]   // Созданные инвайт-коды
  sessions           Session[]
  dialogActions      DialogAction[] @relation("UserActions")
  targetedActions    DialogAction[] @relation("TargetUserActions")
  inviteCode         InviteCode?    @relation("UsedInviteCode", fields: [inviteCodeId], references: [id])
  subscription       Subscription?  // Подписка пользователя
  
  // Связи для BotManager
  botsAssignedByMe   BotManager[]   @relation("AssignedBy")
}

// Промежуточная таблица для связи Bot-Manager (many-to-many)
model BotManager {
  id         String   @id @default(uuid())
  botId      String
  userId     String
  assignedBy String   // Кто назначил (владелец)
  assignedAt DateTime @default(now())
  
  bot        Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assigner   User     @relation("AssignedBy", fields: [assignedBy], references: [id])
  
  @@unique([botId, userId]) // Уникальная пара бот-менеджер
  @@index([userId])
  @@index([botId])
}

// Инвайт-коды теперь общие, без привязки к конкретным ботам
model InviteCode {
  id          String    @id @default(uuid())
  code        String    @unique
  type        CodeType  @default(SINGLE)
  role        UserRole  @default(MANAGER) // Роль для которой создан код
  maxUses     Int       @default(1)
  usedCount   Int       @default(0)
  expiresAt   DateTime?
  comment     String?   // Комментарий от владельца
  createdById String    // Кто создал (владелец)
  createdAt   DateTime  @default(now())
  isActive    Boolean   @default(true)
  
  // Связи
  createdBy   User      @relation(fields: [createdById], references: [id])
  usedByUsers User[]    @relation("UsedInviteCode")
  
  // Опциональная связь с ботом (для обратной совместимости)
  botId       String?
  bot         Bot?      @relation(fields: [botId], references: [id])
}

model Dialog {
  id               String         @id @default(uuid())
  telegramChatId   BigInt
  customerName     String
  customerUsername String?
  customerPhotoUrl String?
  status           DialogStatus   @default(NEW)
  botId            String         // Привязка к боту
  assignedToId     String?        // Назначенный менеджер
  assignedAt       DateTime?
  closeReason      CloseReason?
  closedAt         DateTime?
  lastMessageAt    DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  assignedTo       User?          @relation(fields: [assignedToId], references: [id])
  bot              Bot            @relation(fields: [botId], references: [id])
  messages         Message[]
  actions          DialogAction[]

  @@unique([telegramChatId, botId])
  @@index([botId, status])
  @@index([lastMessageAt])
  @@index([assignedToId])
}

model Message {
  id          String      @id @default(uuid())
  dialogId    String
  text        String
  fromUser    Boolean     // true = от менеджера, false = от клиента
  messageType MessageType @default(TEXT)
  telegramId  BigInt?
  fileUrl     String?     // URL файла на сервере
  fileName    String?     // Оригинальное имя файла
  fileSize    Int?        // Размер файла в байтах
  mimeType    String?     // MIME тип файла
  thumbnailUrl String?    // URL превью для изображений/видео
  createdAt   DateTime    @default(now())
  dialog      Dialog      @relation(fields: [dialogId], references: [id])

  @@index([dialogId, createdAt])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model DialogAction {
  id           String     @id @default(uuid())
  dialogId     String
  dialog       Dialog     @relation(fields: [dialogId], references: [id])
  userId       String
  user         User       @relation("UserActions", fields: [userId], references: [id])
  action       ActionType
  targetUserId String?    // Для действия TRANSFERRED - кому передан диалог
  targetUser   User?      @relation("TargetUserActions", fields: [targetUserId], references: [id])
  createdAt    DateTime   @default(now())

  @@index([dialogId])
  @@index([userId])
  @@index([createdAt])
}

// Enums
enum UserRole {
  ADMIN
  OWNER
  MANAGER
}

enum CodeType {
  SINGLE   // Одноразовый
  MULTI    // Многоразовый
  PARTNER  // Партнерский
}

enum DialogStatus {
  NEW
  ACTIVE
  CLOSED
}

enum MessageType {
  TEXT
  PHOTO
  VIDEO
  DOCUMENT
  VOICE
  STICKER
  LOCATION
}

enum CloseReason {
  DEAL      // Сделка совершена
  CANCELLED // Отменено
}

enum ActionType {
  ASSIGNED
  RELEASED
  TRANSFERRED
}

// Тарифные планы
model Subscription {
  id                String           @id @default(uuid())
  userId            String           @unique
  planType          PlanType         @default(FREE)
  telegramBotsLimit Int              @default(1) // Лимит Telegram ботов (0 = безлимит)
  maxBotsLimit      Int              @default(1) // Лимит MAX ботов (0 = безлимит)
  telegramBotsUsed  Int              @default(0) // Использовано Telegram ботов
  maxBotsUsed       Int              @default(0) // Использовано MAX ботов
  dialogsUsed       Int              @default(0) // Использовано диалогов в текущем месяце
  dialogsLimit      Int              @default(100) // Лимит диалогов (0 = безлимит)
  managersLimit     Int              @default(1) // Лимит менеджеров (0 = безлимит)
  pricePerBot       Int              @default(0) // Цена за бота в рублях
  totalPrice        Int              @default(0) // Общая стоимость подписки
  trialEndsAt       DateTime?        // Дата окончания триала
  billingPeriodEnd  DateTime?        // Конец текущего расчетного периода
  nextPaymentDate   DateTime?        // Дата следующего платежа
  isActive          Boolean          @default(true)
  isTrial           Boolean          @default(false) // Триальный период
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  user              User             @relation(fields: [userId], references: [id])
  payments          Payment[]        // История платежей
  usageHistory      UsageHistory[]   // История использования
}

// Подписка на конкретного бота
model BotSubscription {
  id                String           @id @default(uuid())
  botId             String           @unique
  bot               Bot              @relation(fields: [botId], references: [id], onDelete: Cascade)
  botType           String           // 'TELEGRAM' или 'MAX'
  planType          PlanType         @default(FREE)
  billingPeriod     Int              @default(1) // Период в месяцах (1, 6, 12)
  discount          Int              @default(0) // Скидка в процентах
  basePrice         Int              @default(0) // Базовая цена без скидки
  finalPrice        Int              @default(0) // Итоговая цена со скидкой
  startDate         DateTime         @default(now())
  endDate           DateTime?        // Дата окончания подписки
  isActive          Boolean          @default(true)
  autoRenew         Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  payments          BotPayment[]     // История платежей за бота
}

// Платежи за конкретного бота
model BotPayment {
  id                String           @id @default(uuid())
  botSubscriptionId String
  botSubscription   BotSubscription  @relation(fields: [botSubscriptionId], references: [id])
  amount            Int              // Сумма в рублях
  paymentMethod     String           // 'CARD' или 'INVOICE'
  paymentStatus     PaymentStatus    @default(PENDING)
  invoiceNumber     String?          // Номер счета для оплаты по счету
  invoiceUrl        String?          // URL для скачивания PDF счета
  transactionId     String?          @unique
  paidAt            DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

// История платежей
model Payment {
  id               String          @id @default(uuid())
  subscriptionId   String
  amount           Int             // Сумма в копейках (для точности)
  currency         String          @default("RUB")
  status           PaymentStatus   @default(PENDING)
  paymentMethod    String?         // Тбанк, карта и т.д.
  transactionId    String?         @unique // ID транзакции в платежной системе
  paidAt           DateTime?
  failedAt         DateTime?
  failureReason    String?
  createdAt        DateTime        @default(now())
  
  subscription     Subscription    @relation(fields: [subscriptionId], references: [id])
}

// История использования (для отслеживания лимитов)
model UsageHistory {
  id               String          @id @default(uuid())
  subscriptionId   String
  month            DateTime        // Месяц учета (первое число)
  dialogsCount     Int             @default(0)
  botsCount        Int             @default(0)
  managersCount    Int             @default(0)
  createdAt        DateTime        @default(now())
  
  subscription     Subscription    @relation(fields: [subscriptionId], references: [id])
  
  @@unique([subscriptionId, month])
}

enum PlanType {
  FREE    // 1 бот Telegram, 1 бот MAX, 100 диалогов/мес, 1 менеджер
  PRO     // 990₽/бот, 500 диалогов, безлимит сотрудников
  MAX     // 3000₽/бот, безлимит диалогов и сотрудников
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// Реквизиты компании
model CompanyDetails {
  id                String    @id @default(uuid())
  // Основная информация
  companyName       String    // Наименование организации
  legalForm         String?   // ООО, ИП и т.д.
  inn               String    @unique // ИНН
  kpp               String?   // КПП (для юрлиц)
  ogrn              String?   // ОГРН/ОГРНИП
  
  // Юридический адрес
  legalAddress      String    
  postalAddress     String?   // Почтовый адрес (если отличается)
  
  // Банковские реквизиты
  bankName          String    
  bik               String    
  correspondentAccount String? // Корр. счет
  settlementAccount String    // Расчетный счет
  
  // Контактная информация
  phone             String    
  email             String    
  website           String?   
  
  // Руководитель
  directorName      String    // ФИО директора
  directorPosition  String    @default("Генеральный директор")
  directorBasis     String    @default("Устава") // На основании чего действует
  
  // Дополнительная информация
  taxSystem         String?   // Система налогообложения
  okpo              String?   // ОКПО
  oktmo             String?   // ОКТМО
  okved             String?   // ОКВЭД
  
  // Ссылка на Тбанк
  tbankUrl          String?   @default("https://026401027275.tb.ru")
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}