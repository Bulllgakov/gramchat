const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkAndUpdateUserAccess() {
  try {
    const userTelegramId = BigInt('8384084241');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: userTelegramId },
      include: {
        ownedShop: true,
        inviteCode: true
      }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 8384084241 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log({
      id: user.id,
      telegramId: user.telegramId.toString(),
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      hasFullAccess: user.hasFullAccess,
      isActive: user.isActive,
      inviteCodeUsed: user.inviteCode ? user.inviteCode.code : '–ë–µ–∑ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞',
      hasShop: !!user.ownedShop,
      shopName: user.ownedShop?.name
    });

    if (user.role === 'OWNER' && !user.hasFullAccess) {
      console.log('\n‚ö†Ô∏è  –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!');
      
      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      rl.question('\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø? (yes/no): ', async (answer) => {
        if (answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y') {
          const updatedUser = await prisma.user.update({
            where: { id: user.id },
            data: { hasFullAccess: true }
          });
          
          console.log('\n‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!');
          console.log({
            id: updatedUser.id,
            firstName: updatedUser.firstName,
            role: updatedUser.role,
            hasFullAccess: updatedUser.hasFullAccess
          });
        } else {
          console.log('\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        }
        
        rl.close();
        await prisma.$disconnect();
      });
    } else if (user.hasFullAccess) {
      console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø');
      await prisma.$disconnect();
    } else {
      console.log('\n‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º');
      await prisma.$disconnect();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await prisma.$disconnect();
  }
}

checkAndUpdateUserAccess();