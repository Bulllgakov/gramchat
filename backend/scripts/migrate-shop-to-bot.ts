#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª–∏ Shop –Ω–∞ –º–æ–¥–µ–ª—å Bot
 * –ó–∞–ø—É—Å–∫: npx ts-node scripts/migrate-shop-to-bot.ts
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateShopToBot() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Shop ‚Üí Bot...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const shopsCount = await prisma.shop.count();
    const existingBotsCount = await prisma.bot.count();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: ${shopsCount}`);
    console.log(`üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤: ${existingBotsCount}`);
    
    if (existingBotsCount > 0) {
      console.log('‚ö†Ô∏è  –ë–æ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é.');
      return;
    }

    // 2. –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await prisma.$transaction(async (tx) => {
      console.log('\nüìã –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Shop –≤ Bot...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
      const shops = await tx.shop.findMany({
        include: {
          dialogs: true,
          inviteCodes: true,
          managers: true,
        }
      });

      for (const shop of shops) {
        console.log(`\n  ‚Üí –ú–∏–≥—Ä–∏—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω: ${shop.name} (@${shop.botUsername})`);
        
        // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        const bot = await tx.bot.create({
          data: {
            id: shop.id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ç –∂–µ ID –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            name: shop.name,
            botToken: shop.botToken,
            botUsername: shop.botUsername,
            category: shop.category,
            ownerId: shop.ownerId,
            isActive: shop.isActive,
            isApproved: shop.isApproved,
            createdAt: shop.createdAt,
            updatedAt: shop.updatedAt,
          }
        });
        
        console.log(`    ‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: ${bot.id}`);
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if (shop.managers.length > 0) {
          console.log(`    ‚Üí –ú–∏–≥—Ä–∏—Ä—É–µ–º ${shop.managers.length} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...`);
          
          for (const manager of shop.managers) {
            await tx.botManager.create({
              data: {
                botId: bot.id,
                userId: manager.id,
                assignedBy: shop.ownerId,
                assignedAt: manager.createdAt,
              }
            });
          }
          console.log(`    ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏
        if (shop.dialogs.length > 0) {
          console.log(`    ‚Üí –û–±–Ω–æ–≤–ª—è–µ–º ${shop.dialogs.length} –¥–∏–∞–ª–æ–≥–æ–≤...`);
          
          await tx.dialog.updateMany({
            where: { shopId: shop.id },
            data: { botId: bot.id }
          });
          console.log(`    ‚úÖ –î–∏–∞–ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã
        if (shop.inviteCodes.length > 0) {
          console.log(`    ‚Üí –û–±–Ω–æ–≤–ª—è–µ–º ${shop.inviteCodes.length} –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤...`);
          
          await tx.inviteCode.updateMany({
            where: { shopId: shop.id },
            data: { botId: bot.id }
          });
          console.log(`    ‚úÖ –ò–Ω–≤–∞–π—Ç-–∫–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
        }
      }
      
      // –£–±–∏—Ä–∞–µ–º managedShopId —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\nüìã –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...');
      await tx.user.updateMany({
        where: { managedShopId: { not: null } },
        data: { managedShopId: null }
      });
      
      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –æ—á–∏—â–µ–Ω—ã');
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const botsCount = await prisma.bot.count();
    const botManagersCount = await prisma.botManager.count();
    const dialogsWithBot = await prisma.dialog.count({
      where: { botId: { not: null } }
    });
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`  ‚úÖ –ë–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${botsCount}`);
    console.log(`  ‚úÖ –°–≤—è–∑–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä-–±–æ—Ç: ${botManagersCount}`);
    console.log(`  ‚úÖ –î–∏–∞–ª–æ–≥–æ–≤ —Å –±–æ—Ç–∞–º–∏: ${dialogsWithBot}`);
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\n‚ö†Ô∏è  –í–∞–∂–Ω–æ:');
    console.log('  1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bot –≤–º–µ—Å—Ç–æ Shop');
    console.log('  2. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É Shop');
    console.log('  3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Prisma —Å—Ö–µ–º—É');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateShopToBot();