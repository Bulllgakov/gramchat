#cloud-config
# GramChat Server Cloud-Init Configuration for Timeweb Cloud

# Update and upgrade packages
package_update: true
package_upgrade: true

# Install required packages
packages:
  - curl
  - wget
  - git
  - build-essential
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gnupg
  - lsb-release
  - ufw
  - fail2ban
  - htop
  - net-tools
  - unzip
  - jq
  - nginx
  - certbot
  - python3-certbot-nginx

# Configure swap
swap:
  filename: /swapfile
  size: 4G
  maxsize: 4G

# System configuration
sysctl:
  # Network optimizations
  net.core.somaxconn: 65535
  net.ipv4.tcp_max_syn_backlog: 65535
  net.ipv4.ip_local_port_range: 1024 65535
  net.ipv4.tcp_tw_reuse: 1
  net.ipv4.tcp_fin_timeout: 30
  # File system optimizations
  fs.file-max: 100000
  fs.inotify.max_user_watches: 524288
  # Memory optimizations
  vm.swappiness: 10
  vm.dirty_ratio: 15
  vm.dirty_background_ratio: 5

# Create necessary directories
write_files:
  - path: /opt/gramchat/.env.template
    owner: root:root
    permissions: '0644'
    content: |
      # GramChat Production Environment Variables
      # Copy this file to backend/.env and fill in your values
      
      # Application
      NODE_ENV=production
      PORT=3000
      
      # Database (use Timeweb Managed PostgreSQL)
      DATABASE_URL=postgresql://user:password@host:port/database
      
      # Redis (use Timeweb Managed Redis)
      REDIS_URL=redis://host:port
      
      # Security - GENERATE NEW KEYS!
      JWT_SECRET=CHANGE_ME_GENERATE_RANDOM_KEY
      SESSION_SECRET=CHANGE_ME_GENERATE_RANDOM_KEY
      
      # CORS and URLs
      CORS_ORIGIN=https://your-domain.ru
      FRONTEND_URL=https://your-domain.ru
      
      # Telegram
      TELEGRAM_WEBHOOK_DOMAIN=https://your-domain.ru
      TELEGRAM_AUTH_BOT_TOKEN=your_bot_token
      TELEGRAM_AUTH_BOT_USERNAME=your_bot_username
      
      # Admin
      FIRST_ADMIN_TELEGRAM_ID=your_telegram_id

  - path: /opt/gramchat/deploy.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # GramChat deployment helper script
      
      set -euo pipefail
      
      ACTION=$1
      
      case $ACTION in
          "setup-ssl")
              DOMAIN=$2
              EMAIL=$3
              certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email $EMAIL
              ;;
          "backup-db")
              docker exec gramchat-postgres pg_dump -U gramchat gramchat_db > /opt/gramchat/backups/db_$(date +%Y%m%d_%H%M%S).sql
              ;;
          "restore-db")
              BACKUP_FILE=$2
              docker exec -i gramchat-postgres psql -U gramchat gramchat_db < $BACKUP_FILE
              ;;
          "logs")
              docker-compose -f /opt/gramchat/docker-compose.yml logs -f --tail=100
              ;;
          "restart")
              cd /opt/gramchat && docker-compose restart
              ;;
          *)
              echo "Usage: $0 {setup-ssl|backup-db|restore-db|logs|restart}"
              exit 1
              ;;
      esac

  - path: /opt/gramchat/monitor.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # Simple monitoring script
      
      WEBHOOK_URL=${MONITORING_WEBHOOK_URL:-""}
      
      check_service() {
          SERVICE=$1
          if ! systemctl is-active --quiet $SERVICE; then
              echo "Service $SERVICE is down!"
              if [ ! -z "$WEBHOOK_URL" ]; then
                  curl -X POST $WEBHOOK_URL -H "Content-Type: application/json" -d "{\"text\":\"Alert: $SERVICE is down on $(hostname)\"}"
              fi
          fi
      }
      
      # Check services
      check_service nginx
      check_service docker
      
      # Check disk space
      DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
      if [ $DISK_USAGE -gt 80 ]; then
          echo "Disk usage is high: $DISK_USAGE%"
      fi
      
      # Check memory
      MEM_USAGE=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
      if [ $MEM_USAGE -gt 90 ]; then
          echo "Memory usage is high: $MEM_USAGE%"
      fi

  - path: /opt/gramchat/README.md
    owner: root:root
    permissions: '0644'
    content: |
      # GramChat Server Setup Complete!
      
      ## Next Steps:
      
      1. **Clone your repository:**
         ```bash
         cd /opt/gramchat
         git clone https://github.com/your-username/gramchat.git .
         ```
      
      2. **Configure environment:**
         ```bash
         cp .env.template backend/.env
         nano backend/.env  # Edit with your values
         ```
      
      3. **Build and start services:**
         ```bash
         docker-compose up -d --build
         ```
      
      4. **Run database migrations:**
         ```bash
         docker-compose exec backend npx prisma migrate deploy
         ```
      
      5. **Setup SSL certificate:**
         ```bash
         /opt/gramchat/deploy.sh setup-ssl your-domain.ru your-email@example.com
         ```
      
      ## Useful Commands:
      
      - View logs: `/opt/gramchat/deploy.sh logs`
      - Backup database: `/opt/gramchat/deploy.sh backup-db`
      - Restart services: `/opt/gramchat/deploy.sh restart`
      - Monitor resources: `htop`
      - Check services: `docker-compose ps`
      
      ## Important Paths:
      
      - Application: `/opt/gramchat`
      - Logs: `/opt/gramchat/logs`
      - Backups: `/opt/gramchat/backups`
      - Uploads: `/opt/gramchat/uploads`
      
      ## Security Notes:
      
      1. Change all default passwords and secrets
      2. Configure proper domain and SSL
      3. Review firewall rules: `ufw status`
      4. Check fail2ban: `fail2ban-client status`

  - path: /etc/systemd/system/gramchat.service
    owner: root:root
    permissions: '0644'
    content: |
      [Unit]
      Description=GramChat Application
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/opt/gramchat
      ExecStart=/usr/bin/docker-compose up -d
      ExecStop=/usr/bin/docker-compose down
      TimeoutStartSec=0
      
      [Install]
      WantedBy=multi-user.target

  - path: /etc/logrotate.d/gramchat
    owner: root:root
    permissions: '0644'
    content: |
      /opt/gramchat/logs/*.log {
          daily
          missingok
          rotate 14
          compress
          delaycompress
          notifempty
          create 0640 root root
          sharedscripts
          postrotate
              docker-compose -f /opt/gramchat/docker-compose.yml kill -s USR1 backend frontend
          endscript
      }

# Run commands
runcmd:
  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update -y
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  - systemctl enable docker
  - systemctl start docker
  
  # Install Node.js 20 LTS
  - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
  - apt-get install -y nodejs
  
  # Install PM2
  - npm install -g pm2
  - pm2 startup systemd -u root --hp /root
  
  # Configure firewall
  - ufw --force enable
  - ufw allow 22/tcp
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw allow 3000/tcp
  - ufw reload
  
  # Start services
  - systemctl enable nginx
  - systemctl start nginx
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Create directories
  - mkdir -p /opt/gramchat/backend
  - mkdir -p /opt/gramchat/frontend
  - mkdir -p /opt/gramchat/uploads
  - mkdir -p /opt/gramchat/logs
  - mkdir -p /opt/gramchat/backups
  - chmod -R 755 /opt/gramchat
  
  # Create Docker network
  - docker network create gramchat-network || true
  
  # Enable services
  - systemctl daemon-reload
  - systemctl enable gramchat.service
  
  # Add monitoring cron job
  - echo "*/5 * * * * /opt/gramchat/monitor.sh >> /opt/gramchat/logs/monitor.log 2>&1" | crontab -
  
  # Generate random secrets in template
  - sed -i "s/CHANGE_ME_GENERATE_RANDOM_KEY/$(openssl rand -hex 32)/g" /opt/gramchat/.env.template

# Final message
final_message: |
  GramChat server initial setup completed!
  
  Server is ready for application deployment.
  Check /opt/gramchat/README.md for next steps.
  
  To get started:
  1. SSH into your server
  2. cd /opt/gramchat
  3. Follow the README instructions

# Reboot after cloud-init completes
power_state:
  delay: now
  mode: reboot
  message: Rebooting to apply all changes
  timeout: 30